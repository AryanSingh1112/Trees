/*
// Tree Node
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    // Constructor to initialize a new node
    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};
*/

class Solution {
  public:
  
  void lefttraverse(Node* root , vector<int>&ans){
      
      if( ( root==NULL) || (root->left==NULL && root->right==NULL ) ){
          return ;
      }
      
      ans.push_back(root->data);
      if(root->left){
          lefttraverse(root->left  , ans);
      }
      
      else {
          lefttraverse(root->right , ans);
      }
  }
  
  void leafnode(Node* root , vector<int>&ans){
      if(root==NULL){
          return;
      }
      
      if(root->left==NULL && root->right==NULL){
          ans.push_back(root->data);
          return;
      }
      
      leafnode(root->left , ans);
      leafnode(root->right , ans);
  }
  
   void rightraverse(Node* root , vector<int>&ans){
      
      if( ( root==NULL) || (root->left==NULL && root->right==NULL ) ){
          return ;
      }
      
       if(root->right){
          rightraverse(root->right , ans);
      }
      
      else {
          rightraverse(root->left , ans);
      }
      
      ans.push_back(root->data);
     
  }
    vector<int> boundaryTraversal(Node *root) {
        // code here
        
        vector<int>ans;
        if(root==NULL){
            return ans;
        }
        
        ans.push_back(root->data);
        
        lefttraverse(root->left , ans);
        
        leafnode(root->left,ans);
        leafnode(root->right , ans);
        
        rightraverse(root->right,ans);
        
        return ans;
    }
};
