/*
struct Node
{
    int data;
    Node* left;
    Node* right;
};
*/

class Solution {
  public:
    vector<int> bottomView(Node *root) {
        // Your Code Here
        vector<int> ans;
        if(root == NULL) return ans;
        
        unordered_map<int, int> topnode;
        queue<pair<Node*, int>> q;
        q.push({root, 0});
        
        int minHd = 0, maxHd = 0;

        while(!q.empty()) {
            pair<Node*, int> temp = q.front(); 
            q.pop();
            Node* frontnode = temp.first;
            int hd = temp.second;

            
            topnode[hd] = frontnode->data;


            if(frontnode->left) {
                q.push({frontnode->left, hd - 1});
                minHd = min(minHd, hd - 1);
            }
            if(frontnode->right) {
                q.push({frontnode->right, hd + 1});
                maxHd = max(maxHd, hd + 1);
            }
        }

        for(int hd = minHd; hd <= maxHd; ++hd) {
            ans.push_back(topnode[hd]);
        }

        return ans;
        
    }
};
