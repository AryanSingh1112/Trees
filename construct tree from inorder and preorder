// Class that contains the logic to build the binary tree
/*
Definition of the Node class
class Node {
public:
    int data;
    Node *left;
    Node *right;

    Node(int x) {
        data = x;
        left = NULL;
        right = NULL;
    }
};
*/
class Solution {
  public:
    // Function to build the tree from given inorder and preorder traversals
    
    int findpos(vector<int>&inorder , int element , int n){
        for(int i=0;i<n;i++){
            if(inorder[i]==element)
                return i;
            
        }
            return -1;
        
    }
    
    Node *solve(vector<int> &inorder , vector<int>&preorder , int &index , int inorderstart , int inorderend , int n){
        
        if(index>=n || inorderstart>inorderend){
            return NULL;
        }
        
        int element = preorder[index++];
        Node* root = new Node(element);
        int position = findpos(inorder,element,n);
        
        root->left = solve(inorder , preorder , index , inorderstart , position-1 , n);
        root->right = solve(inorder , preorder , index , position+1 , inorderend , n);
        
        return root;
    }
    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
        // code here
        int n = inorder.size();
        int preorderindex = 0;
        Node* ans = solve(inorder , preorder , preorderindex , 0 , n-1 , n);
        return ans;
        
    }
};











OPTIMIZED FORM:




// Class that contains the logic to build the binary tree
/*
Definition of the Node class
class Node {
public:
    int data;
    Node *left;
    Node *right;

    Node(int x) {
        data = x;
        left = NULL;
        right = NULL;
    }
};
*/
class Solution {
  public:
    // Function to build the tree from given inorder and preorder traversals
    
    void  createmappings(vector<int>&inorder , map<int,int>&nodetoindex , int n){
        for(int i=0;i<n;i++){
            
            nodetoindex[inorder[i]] = i;
        }
        
    }
    
    Node *solve(vector<int> &inorder , vector<int>&preorder , int &index , int inorderstart , int inorderend , int n , map<int,int>&nodetoindex){
        
        if(index>=n || inorderstart>inorderend){
            return NULL;
        }
        
        int element = preorder[index++];
        Node* root = new Node(element);
        int position = nodetoindex[element];
       
        
        root->left = solve(inorder , preorder , index , inorderstart , position-1 , n , nodetoindex);
        root->right = solve(inorder , preorder , index , position+1 , inorderend , n , nodetoindex);
        
        return root;
    }
    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
        // code here
        int n = inorder.size();
        int preorderindex = 0;
        map<int,int>nodetoindex;
        
        createmappings(inorder , nodetoindex , n);
        Node* ans = solve(inorder , preorder , preorderindex , 0 , n-1 , n , nodetoindex);
        return ans;
        
    }
};
